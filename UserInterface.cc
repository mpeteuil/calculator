// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "UserInterface.h"
#include "CalculatorButton.h"
#include "InputBox.h"
#include "OutputBox.h"
#include <sstream>
#include <iostream>
using namespace std;

UserInterface::~UserInterface()
{
  delete evaluate_button;
  delete in_textbox;
  delete out_textbox;
  delete simplify_button;
  delete reset_button;
  delete one_button;
  delete two_button;
  delete three_button;
  delete add_button;
  delete four_button;
  delete five_button;
  delete six_button;
  delete subtract_button;
  delete seven_button;
  delete eight_button;
  delete nine_button;
  delete multiply_button;
  delete zero_button;
  delete divide_button;
  delete true_button;
  delete false_button;
  delete and_button;
  delete or_button;
  delete colon_button;
  delete less_button;
  delete equal_button;
  delete greater_button;
  delete leftpar_button;
  delete rightpar_button;
  delete a_button;
  delete b_button;
  delete c_button;
  delete e_button;
  delete f_button;
  delete d_button;
  delete g_button;
  delete h_button;
  delete i_button;
  delete j_button;
  delete k_button;
  delete l_button;
  delete m_button;
  delete n_button;
  delete o_button;
  delete p_button;
  delete q_button;
  delete r_button;
  delete s_button;
  delete t_button;
  delete u_button;
  delete v_button;
  delete w_button;
  delete x_button;
  delete y_button;
  delete z_button;
  delete ui_window;
}

UserInterface::UserInterface(int X, int Y, int W, int H, const char *L)
  : Fl_Window(X, Y, W, H, L) {
  	DirectorOfExpression = new Director();
{ //ui_window = new Fl_Double_Window(465, 500);
  { evaluate_button = new CalculatorButton(20, 99, 95, 26, "Evaluate");
  		evaluate_button->deactivate();
  } // CalculatorButton* evaluate_button
  { in_textbox = new InputBox(94, 25, 208, 25, "Input ");
  		in_textbox->when(FL_WHEN_CHANGED);
  } // Fl_Input* in_textbox
  { out_textbox = new Fl_Output(93, 58, 210, 25, "Output");
  } // Fl_Output* out_textbox
  { simplify_button = new CalculatorButton(136, 99, 95, 26, "Simplify");
  		simplify_button->deactivate();
  } // CalculatorButton* simplify_button
  { reset_button = new CalculatorButton(247, 99, 95, 26, "Reset");
  		reset_button->deactivate();
  } // CalculatorButton* reset_button
  { one_button = new CalculatorButton(5, 205, 25, 25, "1");
  } // CalculatorButton* one_button
  { two_button = new CalculatorButton(35, 205, 25, 25, "2");
  } // CalculatorButton* two_button
  { three_button = new CalculatorButton(64, 205, 25, 25, "3");
  } // CalculatorButton* three_button
  { add_button = new CalculatorButton(94, 233, 25, 25, "+");
  } // CalculatorButton* add_button
  { four_button = new CalculatorButton(5, 177, 25, 25, "4");
  } // CalculatorButton* four_button
  { five_button = new CalculatorButton(35, 177, 25, 25, "5");
  } // CalculatorButton* five_button
  { six_button = new CalculatorButton(64, 177, 25, 25, "6");
  } // CalculatorButton* six_button
  { subtract_button = new CalculatorButton(94, 205, 25, 25, "-");
  } // CalculatorButton* subtract_button
  { seven_button = new CalculatorButton(5, 149, 25, 25, "7");
  } // CalculatorButton* seven_button
  { eight_button = new CalculatorButton(35, 149, 25, 25, "8");
  } // CalculatorButton* eight_button
  { nine_button = new CalculatorButton(64, 149, 25, 25, "9");
  } // CalculatorButton* nine_button
  { multiply_button = new CalculatorButton(94, 177, 25, 25, "*");
  } // CalculatorButton* multiply_button
  { zero_button = new CalculatorButton(35, 233, 25, 25, "0");
  } // CalculatorButton* zero_button
  { divide_button = new CalculatorButton(94, 149, 25, 25, "/");
  } // CalculatorButton* divide_button
  { true_button = new CalculatorButton(220, 149, 55, 25, "true");
  } // CalculatorButton* true_button
  { false_button = new CalculatorButton(220, 177, 55, 25, "false");
  } // CalculatorButton* false_button
  { and_button = new CalculatorButton(178, 177, 25, 25, "&");
  } // CalculatorButton* and_button
  { or_button = new CalculatorButton(178, 205, 25, 25, "|");
  } // CalculatorButton* or_button
  { colon_button = new CalculatorButton(220, 205, 25, 25, ":");
  } // CalculatorButton* colon_button
  { less_button = new CalculatorButton(150, 149, 25, 25, "<");
  } // CalculatorButton* less_button
  { equal_button = new CalculatorButton(150, 205, 25, 25, "=");
  } // CalculatorButton* equal_button
  { greater_button = new CalculatorButton(150, 177, 25, 25, ">");
  } // CalculatorButton* greater_button
  { leftpar_button = new CalculatorButton(5, 233, 25, 25, "(");
  } // CalculatorButton* leftpar_button
  { rightpar_button = new CalculatorButton(64, 233, 25, 25, ")");
  } // CalculatorButton* rightpar_button
  { a_button = new CalculatorButton(35, 303, 25, 25, "a");
  } // CalculatorButton* a_button
  { b_button = new CalculatorButton(152, 331, 25, 25, "b");
  } // CalculatorButton* b_button
  { c_button = new CalculatorButton(96, 331, 25, 25, "c");
  } // CalculatorButton* c_button
  { e_button = new CalculatorButton(86, 275, 25, 25, "e");
  } // CalculatorButton* e_button
  { f_button = new CalculatorButton(119, 303, 25, 25, "f");
  } // CalculatorButton* f_button
  { d_button = new CalculatorButton(91, 303, 25, 25, "d");
  } // CalculatorButton* d_button
  { g_button = new CalculatorButton(147, 303, 25, 25, "g");
  } // CalculatorButton* g_button
  { h_button = new CalculatorButton(175, 303, 25, 25, "h");
  } // CalculatorButton* h_button
  { i_button = new CalculatorButton(226, 275, 25, 25, "i");
  } // CalculatorButton* i_button
  { j_button = new CalculatorButton(203, 303, 25, 25, "j");
  } // CalculatorButton* j_button
  { k_button = new CalculatorButton(231, 303, 25, 25, "k");
  } // CalculatorButton* k_button
  { l_button = new CalculatorButton(259, 303, 25, 25, "l");
  } // CalculatorButton* l_button
  { m_button = new CalculatorButton(208, 331, 25, 25, "m");
  } // CalculatorButton* m_button
  { n_button = new CalculatorButton(180, 331, 25, 25, "n");
  } // CalculatorButton* n_button
  { o_button = new CalculatorButton(254, 275, 25, 25, "o");
  } // CalculatorButton* o_button
  { p_button = new CalculatorButton(282, 275, 25, 25, "p");
  } // CalculatorButton* p_button
  { q_button = new CalculatorButton(30, 275, 25, 25, "q");
  } // CalculatorButton* q_button
  { r_button = new CalculatorButton(114, 275, 25, 25, "r");
  } // CalculatorButton* r_button
  { s_button = new CalculatorButton(63, 303, 25, 25, "s");
  } // CalculatorButton* s_button
  { t_button = new CalculatorButton(142, 275, 25, 25, "t");
  } // CalculatorButton* t_button
  { u_button = new CalculatorButton(198, 275, 25, 25, "u");
  } // CalculatorButton* u_button
  { v_button = new CalculatorButton(124, 331, 25, 25, "v");
  } // CalculatorButton* v_button
  { w_button = new CalculatorButton(58, 275, 25, 25, "w");
  } // CalculatorButton* w_button
  { x_button = new CalculatorButton(68, 331, 25, 25, "x");
  } // CalculatorButton* x_button
  { y_button = new CalculatorButton(170, 275, 25, 25, "y");
  } // CalculatorButton* y_button
  { z_button = new CalculatorButton(40, 331, 25, 25, "z");
  } // CalculatorButton* z_button
  { comma_button = new CalculatorButton(236, 331, 25, 25, ",");
  } // CalculatorButton* comma_button
  {	tilde_button = new CalculatorButton(178, 149, 25, 25, "~");
  }	// CalculatorButton* tilde_button
  //ui_window->end();
} // Fl_Double_Window* ui_window

	add_button->SetDirector(this);
	subtract_button->SetDirector(this);
	multiply_button->SetDirector(this);
	divide_button->SetDirector(this);
	and_button->SetDirector(this);
	or_button->SetDirector(this);
	greater_button->SetDirector(this);
	less_button->SetDirector(this);
	equal_button->SetDirector(this);
	colon_button->SetDirector(this);
	true_button->SetDirector(this);
	false_button->SetDirector(this);
	leftpar_button->SetDirector(this);
	rightpar_button->SetDirector(this);
	zero_button->SetDirector(this);
	one_button->SetDirector(this);
	two_button->SetDirector(this);
	three_button->SetDirector(this);
	four_button->SetDirector(this);
	five_button->SetDirector(this);
	six_button->SetDirector(this);
	seven_button->SetDirector(this);
	eight_button->SetDirector(this);
	nine_button->SetDirector(this);
	a_button->SetDirector(this);
	b_button->SetDirector(this);
	c_button->SetDirector(this);
	d_button->SetDirector(this);
	e_button->SetDirector(this);
	f_button->SetDirector(this);
	g_button->SetDirector(this);
	h_button->SetDirector(this);
	i_button->SetDirector(this);
	j_button->SetDirector(this);
	k_button->SetDirector(this);
	l_button->SetDirector(this);
	m_button->SetDirector(this);
	n_button->SetDirector(this);
	o_button->SetDirector(this);
	p_button->SetDirector(this);
	q_button->SetDirector(this);
	r_button->SetDirector(this);
	s_button->SetDirector(this);
	t_button->SetDirector(this);
	u_button->SetDirector(this);
	v_button->SetDirector(this);
	w_button->SetDirector(this);
	x_button->SetDirector(this);
	y_button->SetDirector(this);
	z_button->SetDirector(this);
	comma_button->SetDirector(this);
	tilde_button->SetDirector(this);
	simplify_button->SetDirector(this);
	evaluate_button->SetDirector(this);
	reset_button->SetDirector(this);
	in_textbox->SetDirector(this);
	//out_textbox->SetDirector(this);
end();
}

void UserInterface::WidgetChanged(Widget* W)
{
	if (W == ((InputBox*)in_textbox))
	{
		inputString = in_textbox->value();
	}
	else if (W == ((OutputBox*)out_textbox))
	{
		// Do nothing	
	}
	else if (W == ((CalculatorButton*)W))
	{
			if (W == ((CalculatorButton*)simplify_button))
			{
				PrintVisitor* printVisitor1 = new PrintVisitor();
				Expression* Expr = DirectorOfExpression->Create(inputString);
				Expr->addRef();
				SimplifyVisitor* simply1 = new SimplifyVisitor();
				Expr->accept(simply1);
				Expression* simpleExpr1 = simply1->GetSimple();
				simpleExpr1->accept(printVisitor1);
				string tempStr = printVisitor1->GetPrint();
				out_textbox->value(tempStr.c_str());
				Expr->removeRef();
				tempStr = "";
			}
			else if (W == ((CalculatorButton*)evaluate_button))
			{
				EvaluateVisitor* evalVisit = new EvaluateVisitor();
				Expression* Expr = DirectorOfExpression->Create(inputString);
				Expr->addRef();
				Expr->accept(evalVisit);
				double trouble = evalVisit->GetValue();
				string s;
				stringstream s2;
				s2 << trouble;
				s = s2.str();
				out_textbox->value(s.c_str());
				Expr->removeRef();
			}
			else if (W == ((CalculatorButton*)reset_button))
			{
				inputString = "";
				out_textbox->value("");
				reset_button->deactivate();
				in_textbox->value(inputString.c_str());
			}
			else
			{
				inputString += ((CalculatorButton*)W)->label();
				in_textbox->value(inputString.c_str());
			}		
	}
	
	if (inputString == "")
	{
		reset_button->deactivate();
		out_textbox->value("");
	}	
	else
		reset_button->activate();
	
	if (NotEvaluatable(inputString))
		evaluate_button->deactivate();
	else
		evaluate_button->activate();
	cout << "NotSimplifiable: " << GetNotSimplifiable() << endl;
	if (GetNotSimplifiable())
		simplify_button->deactivate();
	else
		simplify_button->activate();
}



bool UserInterface::NotEvaluatable(string s)
{	
	not_simplifiable = false;
	bool evaluatable = true;
	int parentheses = 0;
	string inputExpression = "";
	string variableValueString = "";
	// First check for empty string and negations
	if (s == "" || ((s.size() == 1) && ((s.at(0) < 'a' || s.at(0) > 'z') && (s.at(0) < 'A' || s.at(0) > 'Z') && (s.at(0) < '0' || s.at(0) > '9')))/*s == "" || s == "-" || s == "~" || s == "("*/)
	{
		not_simplifiable = true;
		return true;
	}
	// Gets rid of whitespace in the expression
	unsigned i = 0;
	string tempString = "";
	while (i < s.size())
	{
		if (s[i] != ' ')
			tempString += s[i];
		i++;
	}
	s = tempString;
	
	if (s.at(s.size()-1) == ':' || s.at(s.size()-1) == '=' || s.at(s.size()-1) == ',' || s.at(s.size()-1) == '(')
	{
		not_simplifiable = true;
		return true;
	}
	
	i = 0;
	bool variablesSet = false;
	while (i < s.size()) // Loop til colon, then split string
	{
		if (s.at(i) == ':')
		{
			variablesSet = true;
			i++;
		}
		if (variablesSet == false)
			inputExpression += s.at(i);
		if (variablesSet == true)
			variableValueString += s.at(i);
		i++;
	}
	if (variablesSet)
	{
		if (((variableValueString.at(variableValueString.size()-1) > 'a' && variableValueString.at(variableValueString.size()-1) < 'z')
		|| (variableValueString.at(variableValueString.size()-1) > 'A' && variableValueString.at(variableValueString.size()-1) < 'Z')))
		{
			if (variableValueString.size() > 1)
			{
				if (variableValueString.at(variableValueString.size()-2 == '='))
				{
					not_simplifiable = false;
				}
			}
			else if (variableValueString.size() == 1)
			{	
				not_simplifiable = true;
			}
			return true;
		}
		if (variableValueString.at(variableValueString.size()-1) < '0' || variableValueString.at(variableValueString.size()-1) > '9')
			not_simplifiable = true;
	}
	
	
	cout << "inputExpression: \"" << inputExpression << "\"" << endl;
	// Count Variables
	unsigned variableCounter = 0;
	tempString = "";
	string tempNewString = "";
	for (unsigned l = 0; l < inputExpression.size(); l++)
	{
		//cout << "Curr Pos: \"" << inputExpression.at(l) << "\"" << endl;
		 	
		if (!(inputExpression[l] == '&' || inputExpression[l] == '|' || inputExpression[l] == '=' || inputExpression[l] == '<'
		 	|| inputExpression[l] == '>' || inputExpression[l] == '+' || inputExpression[l] == '-' || inputExpression[l] == '*' 
		 	|| inputExpression[l] == '/' || inputExpression[l] == '(' || inputExpression[l] == ')' || inputExpression[l] == '~'
		 	|| (inputExpression[l] >= '0' && inputExpression[l] <= '9')))
		{
				string tempNewString = "";
				while (l < inputExpression.size() && !(inputExpression[l] == '&' || inputExpression[l] == '|' || inputExpression[l] == '=' || inputExpression[l] == '<'
		 			|| inputExpression[l] == '>' || inputExpression[l] == '+' || inputExpression[l] == '-' || inputExpression[l] == '*' 
		 			|| inputExpression[l] == '/' || inputExpression[l] == '(' || inputExpression[l] == ')' || inputExpression[l] == '~'
		 			|| (inputExpression[l] >= '0' && inputExpression[l] <= '9')))
		 		{
		 			tempString += inputExpression[l];
		 			l++;
		 		}
				//convert to lowercase in order to not reject tRuE, TrUe, etc.
				for (unsigned jk = 0; jk < tempString.size(); jk++)
				{
					tempNewString += tolower(tempString.at(jk));
				}
				if (!(tempNewString == "true" || tempNewString == "false"))
		 			variableCounter++;
		}
		//BEGIN
		else if (inputExpression[l] == '&' || inputExpression[l] == '|' || inputExpression[l] == '=' || inputExpression[l] == '<'
		 	|| inputExpression[l] == '>' || inputExpression[l] == '+' || /*inputExpression[l] == '-' ||*/ inputExpression[l] == '*' 
		 	|| inputExpression[l] == '/')
		{
			if (l-1 >= 0)
			{
				if ((inputExpression[l-1] == '&' || inputExpression[l-1] == '|' || inputExpression[l-1] == '=' || inputExpression[l-1] == '<'
			 	|| inputExpression[l-1] == '>' || inputExpression[l-1] == '+' || inputExpression[l-1] == '-' || inputExpression[l-1] == '*' 
			 	|| inputExpression[l-1] == '/' || inputExpression[l-1] == '(' || /*inputExpression[l-1] == ')' ||*/ inputExpression[l-1] == '~'))
			 	{
			 		not_simplifiable = true;
			 		return true;
			 	}
			}
			if (l+1 < inputExpression.size())
			{
			 	if ((inputExpression[l+1] == '&' || inputExpression[l+1] == '|' || inputExpression[l+1] == '=' || inputExpression[l+1] == '<'
			 	|| inputExpression[l+1] == '>' || inputExpression[l+1] == '+' || /*inputExpression[l-1] == '-' ||*/ inputExpression[l+1] == '*' 
			 	|| inputExpression[l+1] == '/' || /*inputExpression[l+1] == '(' ||*/ inputExpression[l+1] == ')' || inputExpression[l+1] == '~'))
			 	{
			 		not_simplifiable = true;
			 		return true;
			 	}
			}
		} //END
		tempString = "";
		tempNewString = "";
	}
	
	//if ((inputExpression.at(0) == '(' && inputExpression.at(inputExpression.length()-1) == ')')
		 //|| ((inputExpression.at(0) == '-' || inputExpression.at(0) == '~') && (inputExpression.at(1) == '(' && inputExpression.at(inputExpression.length()-1) == ')')))
	//{
		for (unsigned i = 0; i < inputExpression.length(); i++)
		{
			// Attempt to find middle operator...
			if (inputExpression[i] == '(')
				parentheses++;
			if (inputExpression[i] == ')')
				parentheses--;
		}
		if (parentheses != 0)
		{
			not_simplifiable = true;
			return true;
		}
	//}
	
	// Count Variables Values
	unsigned k = 0, variableValueCount = 0;
	string newString = "";
	tempNewString = "";
	char* end;
	if (variablesSet) // Check to make sure there are variables set
	{
		while (k < variableValueString.size())
		{
			while(k < variableValueString.size())
			{
				if (variableValueString.at(k) == '=')
				{
					k++;
					break;
				}
				newString += variableValueString[k];
				k++;
			}
				newString = "";
			while (k < variableValueString.size())
			{
				if (variableValueString.at(k) == ',')
				{
					k++;
					break;
				}
				newString += variableValueString[k];
				
				k++;
			}
			
			//convert to lowercase in order to not reject tRuE, TrUe, etc.
			for (unsigned ij = 0; ij < newString.size(); ij++)
			{
				if (!(newString.at(0) >= '0' && newString.at(0) <= '9'))
					return true;
				tempNewString += tolower(newString.at(ij));
			}
			double tempDouble;
			if (tempNewString == "true")
				tempDouble = 1;
			else if (tempNewString == "false")
				tempDouble = 0;
			else
				tempDouble = strtod(newString.c_str(), &end);
				
			if (tempDouble >= 0)
			{
				variableValueCount++;
			}	
			newString = "";
		}
	}
	if (variableCounter == variableValueCount)
		evaluatable = false;
		
	return evaluatable;
}

bool UserInterface::GetNotSimplifiable()
{
	return not_simplifiable;
}
